#1 a
from sympy import var
from sympy import sympify

a = float(input("Enter the Value of lower limit of the interval : "))
b = float(input("Enter the Value of upper limit of the interval : "))


x = var('x')
fx = input("Enter the Homogenous equation : ")
fx = sympify(fx)


while a >= b:

    print("\n\nWrong Interval")    

    a = float(input("Enter the Value of lower limit of the interval : "))
    b = float(input("Enter the Value of upper limit of the interval : "))


midpoint = float(a + b) / 2

while ( (str(a))[0:6] != (str(b))[0:6] ) :
    
    if ( (fx.subs(x,a)*fx.subs(x,midpoint)) < 0) :
        b = midpoint
    
    else :
        a = midpoint
    
    midpoint = (a + b) / 2
    print(a, " - ", b)    

print("\n\nThe root of the Equation is : ", a) 

#1 b fixed point


import sympy as sp

a = float(input("Enter the Value of lower limit of the interval : "))
b = float(input("Enter the Value of upper limit of the interval : "))


# Getting the Equation


x   = sp.var('x')
fx  = input("Enter the Homogenous equation : ")
fx  = sp.sympify(fx)

# 1 c newton raphson

import sympy as sp

def solve(x):
    return x**3 + (2*x)**2 + 10*x - 20


def newtonRaphson(a0,b0,der,x):
    x0=a0
    condition=True
   
    while condition==True:
        h=-(solve(x0))/der.subs(x,x0)
        x1=x0+h
        if solve(x0)==0 or abs(x1-x0)<0.001:
            return x0
        elif solve(a0)*solve(x1)<0:
            b0=x1
            x0=x1
        elif solve(b0)*solve(x1)<0:
             a0=x1
             x0=x1
       
   
x = sp.symbols('x')
eqn=x**3 + (2*x)**2 + 10*x - 20
der=sp.diff(eqn,x)

a0=float(input("Enter the starting interval : "))
b0=float(input("Enter the ending interval : "))

if solve(a0) * solve(b0) <0:
    final_val = newtonRaphson(a0,b0,der,x)
    print("The final result :",round(final_val,4))
else:
    print("\nVerification step conditionsÂ failed")


# 1 regula falsa
# Program by Sanjay Ram RR - 21pd32

from sympy import var
from sympy import sympify

a = float(input("Enter the Value of lower limit of the interval : "))
b = float(input("Enter the Value of upper limit of the interval : "))

#---------------------------------------------------------------------
# Getting the Equation
#---------------------------------------------------------------------

x = var('x')
fx = input("Enter the Homogenous equation : ")
fx = sympify(fx)

#---------------------------------------------------------------------

x1 = 1
xprev = 0

while ( (str(xprev))[0:6] != (str(x1))[0:6] ) :
    
    if(xprev == x1):
        break
    
    xprev = x1
    
    print(a, " - ", b)
    
    x1 = a + (( fx.subs(x,a)) * abs(b-a)) / ((fx.subs(x,a)) + (fx.subs(x,b)) )
    
    if( fx.subs(x,a) * fx.subs(x,b) < 0 ):
        b = x1
    
    else:
        a = x1

print("\n\nThe root of the Equation is : ", x1) 
# 2 a Jacobi
def solveByJacobi(A):
    
    a = []
    b = []
    c = []

    flag1 = 0
    flag2 = 0
    flag3 = 0
    
    for i in range(3):
        
        a1 = A[i]
        
        if ( flag1 == 0 and abs(a1[0]) >= abs(a1[1]) + abs(a1[2]) ):
          a = a1
          flag1 = 1
        
        elif (flag2 == 0 and abs(a1[1]) >= abs(a1[0]) + abs(a1[2])):
          b = a1
          flag2 = 1
        
        elif (flag3 == 0 and abs(a1[2]) >= abs(a1[0]) + abs(a1[1])):
          c = a1
          flag3 = 1
    
    if (flag1 == 1 and flag2 == 1 and flag3 == 1):
        
        f1 = lambda x,y,z: (a[3] - a[1] * y - a[2] * z) / a[0]
        f2 = lambda x,y,z: (b[3] - b[0] * x - b[2] * z) / b[1]
        f3 = lambda x,y,z: (c[3] - c[0] * x - c[1] * y) / c[2]
        
        x0, y0, z0 =0, 0, 0
        count = 1 
        
        while(1):
            
            x1 = round( f1(x0, y0, z0), 4 )
            y1 = round( f2(x0, y0, z0), 4 )
            z1 = round( f3(x0, y0, z0), 4 )
            
            print("%d\t%0.4f\t%0.4f\t%0.4f\n" %(count, x1, y1, z1) )
            
            if (x1 == x0 and y1 == y0 and z1 == z0):
              break
            
            count += 1
            x0, y0, z0 = x1, y1, z1
        
        print("\nSolution for Gauss Jacobi : x = %0.4f, y = %0.4f and z = %0.4f\n"%(x1, y1, z1) )
    
    else:
        print("Diagonally dominant matrix cannot be formed")
# 2 b seidel
import sys

a = []
b = []
c = []

flag1 = 0
flag2 = 0
flag3 = 0

for i in range(3):
    
    #input should be a 4 element list 
    a1 = eval( input("Enter coefficient : ") )
    
    if ( len(a1) != 4 ):
        
        print("Invalid input")
        sys.exit()
    
    if ( flag1 == 0 and abs( a1[0]) >= abs(a1[1]) + abs(a1[2]) ):
        a = a1
        flag1 = 1
    
    elif ( flag2 == 0 and abs( a1[1]) >= abs(a1[0]) + abs(a1[2]) ):
        b = a1
        flag2 = 1
    
    elif ( flag3 == 0 and abs(a1[2]) >= abs(a1[0]) + abs(a1[1]) ):
        c = a1
        flag3 = 1
        
if ( flag1 == 1 and flag2 == 1 and flag3 == 1 ):
    
    f1 = lambda x, y, z: ( a[3] - a[1] * y - a[2] * z) / a[0]
    f2 = lambda x, y, z: ( b[3] - b[0] * x - b[2] * z) / b[1]
    f3 = lambda x, y, z: ( c[3] - c[0] * x - c[1] * y) / c[2]
    
    x0 = 0
    y0 = 0
    z0 = 0
    count = 1
    
    while(1):
        
        x1 = round( f1(x0, y0, z0), 4)
        y1 = round( f2(x1, y0, z0), 4)
        z1 = round( f3(x1, y1, z0), 4)
        
        print("%d\t%0.4f\t%0.4f\t%0.4f\n" %(count, x1, y1, z1) )
        
        if ( x1 == x0 and y1 == y0 and z1 == z0 ):
            break
        
        count += 1
        x0 = x1
        y0 = y1
        z0 = z1
    
    print("\nSolution for Gauss Seidel : x = %0.4f, y = %0.4f and z = %0.4f\n"% (x1, y1, z1))

else:
    print("Diagonally dominant matrix cannot be formed")


#3 a power
import numpy as np
a = np.array([[4.0,0,1.0],[-2.0,1.0,0],[-2.0,0,1.0]])

#a=np.array([[7.0,9.0],[9.0,7.0]])

print("Enter the values for x0 ( 3 x 1 ) : ")
x0 = []
flag = 0

for  i in range(3):
    g = int(input())
    x0.append(g)

y = np.dot(a, x0)
x1 = np.array([[0,0],[0,0]])

while( (flag == 1) or (flag == 0) ):
    
    y=np.dot(a,x0)
    print(y)
    
    maxi = max(y)
    maxi=float(maxi)
    
    for i in range( len(y) ):
        y[i] = ( y[i] / maxi )
    
    flag = 2
    
    print("x0 = ", x0)
    print("y = ", y)
    
    for i in range(len(y)):
        
        if( x0[i] != y[i] ):
            flag = 1
    x1 = x0
    x0 = y

insy = 0
insx = 0

y = np.dot(a,x1)

for i in range(len(y)):
    
    insy = ( y[i] * x1[i]) + insy
    insx = insx + (x1[i] * x1[i])

lam = insy/insx

print(lam)

# 3 b inverse power
import numpy as np
a = np.array([[4.0,0,1.0],[-2.0,1.0,0],[-2.0,0,1.0]])
a_inv = np.linalg.inv(a)

print("Enter the values for x0 ( 3 x 1 ) : ")
x0 = []
flag = 0

for  i in range(3):
    g = int(input())
    x0.append(g)

y = np.dot(a, x0)
x1 = np.array([[0,0],[0,0]])

while( (flag == 1) or (flag == 0) ):
    
    y=np.dot(a,x0)
    print(y)
    
    maxi = max(y)
    maxi=float(maxi)
    
    for i in range( len(y) ):
        y[i] = ( y[i] / maxi )
    
    flag = 2
    
    print("x0 = ", x0)
    print("y = ", y)
    
    for i in range(len(y)):
        
        if( x0[i] != y[i] ):
            flag = 1
    x1 = x0
    x0 = y

insy = 0
insx = 0

y = np.dot(a,x1)

for i in range(len(y)):
    
    insy = ( y[i] * x1[i]) + insy
    insx = insx + (x1[i] * x1[i])

lam = insy/insx

print(lam)

#4 a quadratic to canonical
import numpy as np
import sympy as syp

def Cannonical(A):
    #A is a matrix
    A = syp.Matrix(A)
    P,D = A.diagonalize()
    return D

A = np.array([[4.0,0,1.0],[-2.0,1.0,0],[-2.0,0,1.0]])
d = Cannonical(A)

print(d)

# 4 a quadratic to cano without library

import numpy as np
import sympy as sp

# -----------------------------------------------------------------------------

def getMatrixMinor(m, i, j):
    return [row[:j] + row[j + 1 :] for row in ( m[:i] + m[i+1:]) ]

# -----------------------------------------------------------------------------

def det(mat):
    mat[0]

# -----------------------------------------------------------------------------

def Trace(matrix, n):
    
    trace = 0
    
    for i in range(0, n):
        for j in range(0, n):
            
            if i == j:
                trace += matrix[i][j]
            else:
                continue
    
    return trace

# -----------------------------------------------------------------------------

def Sum(matrix, n):
    
    Sum = 0
    
    for i in range(0, n):
        for j in range(0, n):
            
            if i==j:
                temp = getMatrixMinor(matrix, i, j)
                Sum += temp[0][0] * temp[1][1] - temp[0][1] * temp[1][0]
    
    return Sum

def determinant(mat):
    
    x=mat[0][0]*(mat[1][1]*mat[2][2]- mat[1][2]*mat[2][1])
    y=mat[0][1]*(mat[1][0]*mat[2][2]- mat[1][2]*mat[2][0])
    z=mat[0][2]*(mat[1][0]*mat[2][1]- mat[1][1]*mat[2][0])
    
    return x-y+z

# -----------------------------------------------------------------------------

def EigenValues(mat):

    Det   = determinant(mat)
    trace = Trace(mat,len(mat))
    
    sm = Sum(mat,len(mat))
    a = 1
    
    exp = [a, -1 * trace, sm, -1 * Det ]
    sol = np.roots(exp)
    
    EigValues = []
    
    for i in sol:
          EigValues.append(np.round(i,0))
    
    return EigValues

x = sp.var('x')
y = sp.var('y')
z = sp.var('z')

n = int(input("Enter no. of variables : "))
expr = sp.sympify(input("Enter the Quadratic form : "))

symmetric_matrix = [ [] for  i in  range(n) ]
symmetric_matrix[0].append( expr.coeff(x**2) )
symmetric_matrix[0].append( int( 0.5 * (expr.coeff( x * y ))) )
symmetric_matrix[0].append( int( 0.5 * (expr.coeff( x * z ))) )
symmetric_matrix[1].append( int( 0.5 * (expr.coeff( x * y ))) )
symmetric_matrix[1].append( expr.coeff( y**2 ) )
symmetric_matrix[1].append( int( 0.5 * (expr.coeff( y * z ))) )
symmetric_matrix[2].append( int( 0.5 * (expr.coeff( x * z ))) )
symmetric_matrix[2].append( int( 0.5 * (expr.coeff( y * z ))) )
symmetric_matrix[2].append( expr.coeff( z**2 ) )
        
print("\nSymmetric matrix for given Quadratic form is : ", symmetric_matrix )

matrix = EigenValues( list(symmetric_matrix) )

print("\nCanonical form for given Quadratic form is : ")
print("{}x2+{}*y2+{}*z*2".format(matrix[0], matrix[1], matrix[2] ), end = "\n\n")


# 4 c 
import numpy as np
import sympy as syp

# RREF using Library

#mat=syp.matrices.Matrix(mat)
#rref=mat.rref()[0]

# -----------------------------------------------------------------------------

# Sys of Equations Solver

def getMatrix(lst):
    lst=[lst[i].split("=") for i in range(len(lst))]
    lst=[lst[i][0].split("+")+[(lst[i][1])] for i in range(len(lst))]
    A=[[int(i[:len(i)-1]) for i in lst[j] if (i[-1].isalpha())] for j in range(len(lst))]
    B=[int(i[len(lst[0])-1]) for i in lst]
    return A,B

# METHOD 1 :

A,B=getMatrix(["2x+3y=7","5x+7y=17"])
np.linalg.solve(A,B)

# METHOD 2 :
    
#Using np.dot() and linalg.inverse()
A,B=getMatrix(["2x+3y=7","5x+7y=17"])
np.dot(np.linalg.inv(A),B)

# METHOD 3 :
    
A,B=getMatrix(["1x+1y+2z=8","-1x+-2y+3z=1","3x+-7y+4z=10"])
A=syp.Matrix(A)
B=syp.Matrix(B)
x,y,z=syp.symbols("x, y, z ")
syp.linsolve((A,B),[x,y,z])

# -----------------------------------------------------------------------------

# Is Diagonizable :
    
def is_diagonalizable(matrix):
    eigvals, eigvecs = np.linalg.eig(matrix)
    return all(np.iscomplex(eigval) for eigval in eigvals)

# 5 a augumented
n = int( input("Enter the number of Equations : ") )
m = int( input("Enter te number of Variables  : ") )

arr = []
eqn = ["", "", "", "", "", "", ""]
var = ['z', 'y', 'x']

for i in range( 0, n ):
    
     print("\nEnter the equation " + str(i + 1) + " : ")
     temp = []
     
     for j in range(0, m + 1 ):
         
         if j == m:
             ele = int( input("Enter the constant :") )
         
         else:
             ele = int( input("Enter the coeffcient of variable " + str(j + 1) + " : ") )
         
         temp.append(ele)
         
     for k in range (0, m + 1):
             
        if (m - k) == 0 :
            eqn[i] = eqn[i] + " + " + str(temp[k])
            
        elif k == 0:
            eqn[i] = str( temp[k] ) + var[m - k]
         
        else:
            eqn[i] = eqn[i] + " + " + str( temp[k] ) + var[m - k]


     arr.append(temp)

print("\n-------------------------------------------")

print("\nLinear System :\n")

for i in range( 0, n ):
     print(eqn[i] + " = 0 ")
     
print("\nAugmented Matrix :\n")     

for i in arr:
    print(i)
    
print("\n-------------------------------------------")


# 5 b Diagnolization
import numpy as np
def checkLow_tringle(mat):          #this will check for any zero rows , to make it as a trailing row
    for i in range(3):
        if(((mat[i][0]==0) & (mat[i][1]==0)) & (mat[i][2]==0)):
            lst=mat[i]
            mat.pop(i)
            mat.append(lst)
    return mat
            
def evaluate(mat):                  # for calculating eigen vector after compting RREF of (A- (lamda)*I)
    eigVec=[0,0,0]                  
    for i in range(3):
        if(((mat[i][0]==0) & (mat[i][1]==0)) & (mat[i][2]==0)):
            eigVec[i]=1
    if(eigVec[0]==0):
        x=-mat[0][1]-mat[0][2]
        eigVec[0]=x
    if(eigVec[1]==0):
        y=-mat[1][0]-mat[1][2]

        eigVec[1]=y
    if(eigVec[2]==0):
        z=-mat[2][0]-mat[2][1]
        eigVec[2]=z
    return eigVec
        
def subRows(l1,l2,key):                         # Subracting two rows for row elementary operations
    ans=[]
    for i in range(len(l1)):

        ans.append(l1[i]-(key*l2[i]))
        
    return ans
def getRREF(mat):                               #To get RREF of the Matrix
    mat.reverse()                               #this will compute RREF for a REF matrix
    for i in mat:
        if(1 in i):
            ones=i.index(1)
        else:
            continue
        ind=mat.index(i)
        for j in range(ind,len(mat)-1):
            key=mat[j+1][ones]
            mat[j+1]=subRows(mat[j+1],mat[ind], key)
    mat.reverse()
 
    return (mat)

def getRowEcholon(mat):                         #To get REF of the matrix
    ptr=0                                       
    mat=checkLow_tringle(mat)
    for i in mat:
        div=i[ptr]
        if(div!=0):
                for k in range(ptr,len(i)):
                    i[k]=i[k]/div
        ind=mat.index(i)
        for j in range(ind,len(mat)-1):
            key=mat[j+1][ptr]
            mat[j+1]=subRows(mat[j+1],mat[ind],key)
        ptr+=1
        mat=checkLow_tringle(mat)
    return mat
def getMatrixMinor(m,i,j):
    return [row[:j] + row[j+1:] for row in (m[:i]+m[i+1:])]

def Trace(matrix,n):
    trace = 0                           # To get trace of a matrix
    for i in range(0,n):
        for j in range(0,n):
            if i == j:
                trace += matrix[i][j]
            else:
                continue
    return trace
def Sum(matrix,n):
    Sum = 0                         # to get  Sum of all minors of the matrix
    for i in range(0,n):
        for j in range(0,n):
            if i==j:
                temp = getMatrixMinor(matrix,i,j)
                Sum += temp[0][0]*temp[1][1] - temp[0][1]*temp[1][0]
    return Sum
def AminusLamdaI(A,lam):
    I=[[1,0,0],[0,1,0],[0,0,1]]
    for i in range(3):                  # Computes (A - (lamda)*I) and return RREF of the resultant matrix
        I[i][i]=int(lam)
    res=[]
    for i in range(3):
        lst=[]
        for j in range(3):
            lst.append(A[i][j]-I[i][j])
        res.append(lst)
    result=getRREF(getRowEcholon(res))
    result=evaluate(result)
    return result
def getPmatrix(mat):
    lst=[[0,0,0],[0,0,0],[0,0,0]]       
    for i in range(3):
        for j in range(3):
            lst[j][i]=mat[i][j]
    return lst

mat=[]

for i in range(0,3):				#GIVE THE INPUT IN THE NORMAL INPUT FORMAT
     temp = []
     for j in range(0,3):
         ele = float(input("Enter a[" + str(i+1) + "][" + str(j+1) + "] :"))
         temp.append(ele)
     mat.append(temp)
Det = np.linalg.det(mat)
trace=Trace(mat,len(mat))
Sum=Sum(mat,len(mat))
a=1
exp = [a,-1*trace,Sum,-1*Det]
sol = np.roots(exp)
EigValues=[]
for i in sol:
    EigValues.append(np.round(i,0))
EigVec=[]
print("Eigen values of the given matrix :",EigValues)
for i in EigValues:
    EigVec.append(AminusLamdaI(mat,i))
print("Eigen Vectors of the given matrix : ")
print(EigVec)
P=np.array(getPmatrix(EigVec))
Pinv=np.linalg.inv(P)
#print(P)
#print(Pinv)
temp=np.dot(Pinv,mat)
res=np.dot(temp,P)
print("Diagonal matrix using P^-1 * D * P method : ")
print(res)
print("Diagonal matrix : ")
for i in range(3):
    for j in range(3):
        if(i==j):
            print(EigValues[i]," ",end=" ")
        else:
            print(0,"  ",end=" ")
    print()

# 5 c Gauss Jordan RREF Converter
import numpy as np
import sys

n = int( input('Enter number of unknowns : ') )

flag = 1
count = 0
rankA = 0
rankAb = 0
m = 3

# Making numpy array of n x n+1 size and initializing 
# to zero for storing augmented matrix
a = np.zeros((3, n + 1))
b = np.zeros((3, n))

# Making numpy array of n size and initializing 
# to zero for storing solution vector
x = np.zeros(n)

print('Enter Augmented Matrix Coefficients : ')
for i in range(n):
    for j in range(n+1):
        
        a[i][j] = float( input( 'a[' + str(i) + '][' + str(j) +'] = ') )
                
        if(flag <= n):
            b[i][j] = a[i][j]
            flag = flag + 1
      
    flag = 1
# Applying Gauss Jordan Elimination
for i in range(n):
    if a[i][i] == 0.0:
        sys.exit('Divide by zero detected!')
        
    for j in range(n):
        if i != j:
            ratio = a[j][i] / a[i][i]

            for k in range(n + 1):
                a[j][k] = a[j][k] - ratio * a[i][k]



for i in range (0, m, 1):
    for j in range (0, n, 1):
        
        if( b[j][i] == 0 ):         
            count += 1
    
    if( count != m ):
        rankA += 1
    
    count = 0    
    
for i in range (0, m, 1):
    for j in range (0, n, 1):
        
        if( a[j][i] == 0 ):         #Checking coloumn wise
            count += 1
    
    if(count != m):
        rankAb += 1
    
    count = 0    
   
print(rankAb)
   
print("\nRank of the Matrix ( A ): ", rankA )
print("Rank of the Matrix ( Ab ): ", rankAb )

# Obtaining Solution
for i in range(n):
    x[i] = a[i][n] / a[i][i]

if(rankA != rankAb):
    print("\nThe system has no solution")

else:
    
    if(rankA == n):
        print("\nThe system has unique solution")
    
    elif(rankA < n):
        print("\nThe system has infinite solution")

# Displaying solution
print('Required solution is : ')
for i in range(n):
    print('X%d = %0.2f' %(i, x[i]), end = '\t')


# 5 d Gauss Jordan Converter
def RREF_Converter( lst, row, col ):
    
    if not lst:
        return
    
    zero = 0
    
    for r in range(row):
        
        if zero >= col:
            return
        i = r
        
        while lst[i][zero] == 0:
            
            i += 1
            if i == row:
                i = r
                zero += 1

                if col == zero:
                    return

        lst[i], lst[r] = lst[r],lst[i]

        z = lst[r][zero]
        lst[r] = [ a/float(z) for a in lst[r] ]

        for i in range(row):
            if i != r:
                z = lst[i][zero]
                lst[i] = [ k - z*s for s,k in zip(lst[r],lst[i])]
        zero += 1



def check_no_of_zero_rows(lst, row, col):
    count = 0

    for i in range(0, row, 1):
        
        flag = 0
        for j in range(0, col, 1):
            
            if( lst[i][j] == 0):
                flag += 1

        if flag == col:
            count += 1

    return count



row = int( input("Enter the number of rows : ") )
col = int( input("Enter the number of columns : ") )

lst = []

for i in range(0,row,1):
    lst_ = []
    for j in range(0,col,1):
        lst_.append(float(input(f"Enter the elemnt[{i}][{j}]: ")))
    lst.append(lst_)

# for i in range(0,row,1):
#     print(lst[i])

RREF_Converter(lst,row,col)

print("\n-------------------------------------------")
print("\nThe RREF of the matrix is: \n")

for i in range(0,row,1):
    print(lst[i])

print("\n")
print(f"Rank of the matrix is {row - check_no_of_zero_rows(lst,row,col)}")
print("\n-------------------------------------------")





 



